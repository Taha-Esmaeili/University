
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMUL_OPDIV_OPleftADD_OPSUB_OPnonassocLT_OPLE_OPNE_OPEQ_OPGE_OPGT_OPleftAND_KWleftOR_KWADD_OP AND_KW ASSIGN_OP BEGIN_KW BOOLEAN_KW COLON COMMA DIV_OP DO_KW ELSE_KW END_KW EQ_OP FALSE_KW FOR_KW FUNCTION_KW GE_OP GT_OP IDENTIFIER IF_KW INTEGER_KW INTEGER_NUMBER Illegal_Lexeme LEFT_PA LE_OP LT_OP MUL_OP NE_OP OR_KW PROGRAM_KW REAL_KW REAL_NUMBER RETURN_KW RIGHT_PA SEMICOLON SUB_OP THEN_KW TO_KW TRUE_KW WHILE_KWstart : PROGRAM_KW IDENTIFIER SEMICOLON decList funcList blockdecList : decsdecList : decs decListdecs : type varList SEMICOLONdecs : emptytype : INTEGER_KWtype : REAL_KWtype : BOOLEAN_KWvarList : IDENTIFIERvarList : varList COMMA IDENTIFIERfuncList : funcList funcDecfuncList : emptyfuncDec : FUNCTION_KW IDENTIFIER parameters COLON type decList blockparameters : LEFT_PA decList RIGHT_PAblock : BEGIN_KW stmtList END_KWstmtList : stmtstmtList : stmtList stmtstmt : IDENTIFIER ASSIGN_OP expr SEMICOLONstmt : IF_KW expr THEN_KW stmtstmt : IF_KW expr THEN_KW stmt ELSE_KW stmtstmt : WHILE_KW expr DO_KW stmtstmt : FOR_KW IDENTIFIER ASSIGN_OP expr TO_KW expr DO_KW stmtstmt : RETURN_KW expr SEMICOLONstmt : blockexpr : expr AND_KW exprexpr : expr OR_KW exprexpr : expr MUL_OP exprexpr : expr DIV_OP exprexpr : expr ADD_OP exprexpr : expr SUB_OP exprexpr : expr relop exprexpr : LEFT_PA expr RIGHT_PAexpr : INTEGER_NUMBERexpr : REAL_NUMBERexpr : TRUE_KWexpr : FALSE_KWexpr : IDENTIFIER LEFT_PA actualparamlist RIGHT_PAexpr : IDENTIFIERactualparamlist : expractualparamlist : actualparamlist COMMA expractualparamlist : IDENTIFIERactualparamlist : emptyrelop : LT_OPrelop : LE_OPrelop : EQ_OPrelop : NE_OPrelop : GE_OPrelop : GT_OPempty :'
    
_lr_action_items = {'PROGRAM_KW':([0,],[2,]),'$end':([1,17,33,],[0,-1,-15,]),'IDENTIFIER':([2,7,9,10,11,19,20,22,23,24,26,27,28,29,30,33,34,35,37,49,50,51,52,53,54,55,56,57,58,59,60,61,62,64,65,66,67,70,71,84,88,90,91,93,97,98,],[3,16,-6,-7,-8,25,31,32,25,-16,42,42,44,42,-24,-15,-17,42,42,25,42,42,42,42,42,42,42,-43,-44,-45,-46,-47,-48,80,25,42,-23,-18,-19,-21,25,42,42,-20,25,-22,]),'SEMICOLON':([3,15,16,32,38,39,40,41,42,45,48,72,73,74,75,76,77,78,79,89,],[4,21,-9,-10,-33,-34,-35,-36,-38,67,70,-25,-26,-27,-28,-29,-30,-31,-32,-37,]),'INTEGER_KW':([4,6,8,9,10,11,21,47,68,86,],[9,9,-5,-6,-7,-8,-4,9,9,9,]),'REAL_KW':([4,6,8,9,10,11,21,47,68,86,],[10,10,-5,-6,-7,-8,-4,10,10,10,]),'BOOLEAN_KW':([4,6,8,9,10,11,21,47,68,86,],[11,11,-5,-6,-7,-8,-4,11,11,11,]),'BEGIN_KW':([4,5,6,8,9,10,11,12,13,14,18,19,21,23,24,30,33,34,49,65,67,70,71,84,86,88,92,93,96,97,98,],[-49,-49,-2,-5,-6,-7,-8,19,-12,-3,-11,19,-4,19,-16,-24,-15,-17,19,19,-23,-18,-19,-21,-49,19,19,-20,-13,19,-22,]),'FUNCTION_KW':([4,5,6,8,12,13,14,18,21,33,96,],[-49,-49,-2,-5,20,-12,-3,-11,-4,-15,-13,]),'RIGHT_PA':([6,8,14,21,38,39,40,41,42,47,63,64,69,72,73,74,75,76,77,78,79,80,81,82,83,89,94,],[-2,-5,-3,-4,-33,-34,-35,-36,-38,-49,79,-49,87,-25,-26,-27,-28,-29,-30,-31,-32,-38,89,-39,-42,-37,-40,]),'COMMA':([15,16,32,38,39,40,41,42,64,72,73,74,75,76,77,78,79,80,81,82,83,89,94,],[22,-9,-10,-33,-34,-35,-36,-38,-49,-25,-26,-27,-28,-29,-30,-31,-32,-38,90,-39,-42,-37,-40,]),'IF_KW':([19,23,24,30,33,34,49,65,67,70,71,84,88,93,97,98,],[26,26,-16,-24,-15,-17,26,26,-23,-18,-19,-21,26,-20,26,-22,]),'WHILE_KW':([19,23,24,30,33,34,49,65,67,70,71,84,88,93,97,98,],[27,27,-16,-24,-15,-17,27,27,-23,-18,-19,-21,27,-20,27,-22,]),'FOR_KW':([19,23,24,30,33,34,49,65,67,70,71,84,88,93,97,98,],[28,28,-16,-24,-15,-17,28,28,-23,-18,-19,-21,28,-20,28,-22,]),'RETURN_KW':([19,23,24,30,33,34,49,65,67,70,71,84,88,93,97,98,],[29,29,-16,-24,-15,-17,29,29,-23,-18,-19,-21,29,-20,29,-22,]),'END_KW':([23,24,30,33,34,67,70,71,84,93,98,],[33,-16,-24,-15,-17,-23,-18,-19,-21,-20,-22,]),'ASSIGN_OP':([25,44,],[35,66,]),'LEFT_PA':([26,27,29,31,35,37,42,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,80,90,91,],[37,37,37,47,37,37,64,37,37,37,37,37,37,37,-43,-44,-45,-46,-47,-48,37,37,64,37,37,]),'INTEGER_NUMBER':([26,27,29,35,37,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,90,91,],[38,38,38,38,38,38,38,38,38,38,38,38,-43,-44,-45,-46,-47,-48,38,38,38,38,]),'REAL_NUMBER':([26,27,29,35,37,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,90,91,],[39,39,39,39,39,39,39,39,39,39,39,39,-43,-44,-45,-46,-47,-48,39,39,39,39,]),'TRUE_KW':([26,27,29,35,37,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,90,91,],[40,40,40,40,40,40,40,40,40,40,40,40,-43,-44,-45,-46,-47,-48,40,40,40,40,]),'FALSE_KW':([26,27,29,35,37,50,51,52,53,54,55,56,57,58,59,60,61,62,64,66,90,91,],[41,41,41,41,41,41,41,41,41,41,41,41,-43,-44,-45,-46,-47,-48,41,41,41,41,]),'ELSE_KW':([30,33,67,70,71,84,93,98,],[-24,-15,-23,-18,88,-21,-20,-22,]),'THEN_KW':([36,38,39,40,41,42,72,73,74,75,76,77,78,79,89,],[49,-33,-34,-35,-36,-38,-25,-26,-27,-28,-29,-30,-31,-32,-37,]),'AND_KW':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[50,-33,-34,-35,-36,-38,50,50,50,50,-25,-26,50,50,50,50,50,-32,-38,50,50,-37,50,50,]),'OR_KW':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[51,-33,-34,-35,-36,-38,51,51,51,51,51,-26,51,51,51,51,51,-32,-38,51,51,-37,51,51,]),'MUL_OP':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[52,-33,-34,-35,-36,-38,52,52,52,52,-25,-26,-27,-28,-29,-30,52,-32,-38,52,52,-37,52,52,]),'DIV_OP':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[53,-33,-34,-35,-36,-38,53,53,53,53,-25,-26,-27,-28,-29,-30,53,-32,-38,53,53,-37,53,53,]),'ADD_OP':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[54,-33,-34,-35,-36,-38,54,54,54,54,-25,-26,54,54,-29,-30,54,-32,-38,54,54,-37,54,54,]),'SUB_OP':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[55,-33,-34,-35,-36,-38,55,55,55,55,-25,-26,55,55,-29,-30,55,-32,-38,55,55,-37,55,55,]),'LT_OP':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[57,-33,-34,-35,-36,-38,57,57,57,57,-25,-26,57,57,57,57,57,-32,-38,57,57,-37,57,57,]),'LE_OP':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[58,-33,-34,-35,-36,-38,58,58,58,58,-25,-26,58,58,58,58,58,-32,-38,58,58,-37,58,58,]),'EQ_OP':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[59,-33,-34,-35,-36,-38,59,59,59,59,-25,-26,59,59,59,59,59,-32,-38,59,59,-37,59,59,]),'NE_OP':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[60,-33,-34,-35,-36,-38,60,60,60,60,-25,-26,60,60,60,60,60,-32,-38,60,60,-37,60,60,]),'GE_OP':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[61,-33,-34,-35,-36,-38,61,61,61,61,-25,-26,61,61,61,61,61,-32,-38,61,61,-37,61,61,]),'GT_OP':([36,38,39,40,41,42,43,45,48,63,72,73,74,75,76,77,78,79,80,82,85,89,94,95,],[62,-33,-34,-35,-36,-38,62,62,62,62,-25,-26,62,62,62,62,62,-32,-38,62,62,-37,62,62,]),'DO_KW':([38,39,40,41,42,43,72,73,74,75,76,77,78,79,89,95,],[-33,-34,-35,-36,-38,65,-25,-26,-27,-28,-29,-30,-31,-32,-37,97,]),'TO_KW':([38,39,40,41,42,72,73,74,75,76,77,78,79,85,89,],[-33,-34,-35,-36,-38,-25,-26,-27,-28,-29,-30,-31,-32,91,-37,]),'COLON':([46,87,],[68,-14,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'decList':([4,6,47,86,],[5,14,69,92,]),'decs':([4,6,47,86,],[6,6,6,6,]),'type':([4,6,47,68,86,],[7,7,7,86,7,]),'empty':([4,5,6,47,64,86,],[8,13,8,8,83,8,]),'funcList':([5,],[12,]),'varList':([7,],[15,]),'block':([12,19,23,49,65,88,92,97,],[17,30,30,30,30,30,96,30,]),'funcDec':([12,],[18,]),'stmtList':([19,],[23,]),'stmt':([19,23,49,65,88,97,],[24,34,71,84,93,98,]),'expr':([26,27,29,35,37,50,51,52,53,54,55,56,64,66,90,91,],[36,43,45,48,63,72,73,74,75,76,77,78,82,85,94,95,]),'parameters':([31,],[46,]),'relop':([36,43,45,48,63,72,73,74,75,76,77,78,82,85,94,95,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'actualparamlist':([64,],[81,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> PROGRAM_KW IDENTIFIER SEMICOLON decList funcList block','start',6,'p_start','parser.py',28),
  ('decList -> decs','decList',1,'p_decList_1','parser.py',33),
  ('decList -> decs decList','decList',2,'p_decList_2','parser.py',38),
  ('decs -> type varList SEMICOLON','decs',3,'p_decs_1','parser.py',43),
  ('decs -> empty','decs',1,'p_decs_2','parser.py',48),
  ('type -> INTEGER_KW','type',1,'p_type_1','parser.py',53),
  ('type -> REAL_KW','type',1,'p_type_2','parser.py',58),
  ('type -> BOOLEAN_KW','type',1,'p_type_3','parser.py',63),
  ('varList -> IDENTIFIER','varList',1,'p_varList_1','parser.py',68),
  ('varList -> varList COMMA IDENTIFIER','varList',3,'p_varList_2','parser.py',73),
  ('funcList -> funcList funcDec','funcList',2,'p_funcList_1','parser.py',78),
  ('funcList -> empty','funcList',1,'p_funcList_2','parser.py',83),
  ('funcDec -> FUNCTION_KW IDENTIFIER parameters COLON type decList block','funcDec',7,'p_funcDec','parser.py',88),
  ('parameters -> LEFT_PA decList RIGHT_PA','parameters',3,'p_parameters','parser.py',93),
  ('block -> BEGIN_KW stmtList END_KW','block',3,'p_block','parser.py',98),
  ('stmtList -> stmt','stmtList',1,'p_stmtList_1','parser.py',103),
  ('stmtList -> stmtList stmt','stmtList',2,'p_stmtList_2','parser.py',108),
  ('stmt -> IDENTIFIER ASSIGN_OP expr SEMICOLON','stmt',4,'p_stmt_1','parser.py',113),
  ('stmt -> IF_KW expr THEN_KW stmt','stmt',4,'p_stmt_2','parser.py',118),
  ('stmt -> IF_KW expr THEN_KW stmt ELSE_KW stmt','stmt',6,'p_stmt_3','parser.py',123),
  ('stmt -> WHILE_KW expr DO_KW stmt','stmt',4,'p_stmt_4','parser.py',128),
  ('stmt -> FOR_KW IDENTIFIER ASSIGN_OP expr TO_KW expr DO_KW stmt','stmt',8,'p_stmt_5','parser.py',133),
  ('stmt -> RETURN_KW expr SEMICOLON','stmt',3,'p_stmt_6','parser.py',138),
  ('stmt -> block','stmt',1,'p_stmt_7','parser.py',143),
  ('expr -> expr AND_KW expr','expr',3,'p_expr_1','parser.py',148),
  ('expr -> expr OR_KW expr','expr',3,'p_expr_2','parser.py',153),
  ('expr -> expr MUL_OP expr','expr',3,'p_expr_3','parser.py',158),
  ('expr -> expr DIV_OP expr','expr',3,'p_expr_4','parser.py',163),
  ('expr -> expr ADD_OP expr','expr',3,'p_expr_5','parser.py',168),
  ('expr -> expr SUB_OP expr','expr',3,'p_expr_6','parser.py',173),
  ('expr -> expr relop expr','expr',3,'p_expr_7','parser.py',178),
  ('expr -> LEFT_PA expr RIGHT_PA','expr',3,'p_expr_8','parser.py',183),
  ('expr -> INTEGER_NUMBER','expr',1,'p_expr_9','parser.py',188),
  ('expr -> REAL_NUMBER','expr',1,'p_expr_10','parser.py',193),
  ('expr -> TRUE_KW','expr',1,'p_expr_11','parser.py',198),
  ('expr -> FALSE_KW','expr',1,'p_expr_12','parser.py',203),
  ('expr -> IDENTIFIER LEFT_PA actualparamlist RIGHT_PA','expr',4,'p_expr_13','parser.py',208),
  ('expr -> IDENTIFIER','expr',1,'p_expr_14','parser.py',213),
  ('actualparamlist -> expr','actualparamlist',1,'p_actualparamlist_1','parser.py',218),
  ('actualparamlist -> actualparamlist COMMA expr','actualparamlist',3,'p_actualparamlist_2','parser.py',223),
  ('actualparamlist -> IDENTIFIER','actualparamlist',1,'p_actualparamlist_3','parser.py',228),
  ('actualparamlist -> empty','actualparamlist',1,'p_actualparamlist_4','parser.py',233),
  ('relop -> LT_OP','relop',1,'p_relop_1','parser.py',238),
  ('relop -> LE_OP','relop',1,'p_relop_2','parser.py',243),
  ('relop -> EQ_OP','relop',1,'p_relop_3','parser.py',248),
  ('relop -> NE_OP','relop',1,'p_relop_4','parser.py',253),
  ('relop -> GE_OP','relop',1,'p_relop_5','parser.py',258),
  ('relop -> GT_OP','relop',1,'p_relop_6','parser.py',263),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',268),
]
