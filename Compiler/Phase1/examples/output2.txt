Mohammad Taha Karbalaee Esmaeili - 40121803          محمد طاها کربلای اسمعیلی - ۴۰۱۲۱۸۰۳
program                       <PROGRAM_KW, ->
prg1                          <IDENTIFIER, 0>
;                             <SEMICOLON, ->
integer                       <INTEGER_KW, ->
num                           <IDENTIFIER, 1>
,                             <COMMA, ->
divisor                       <IDENTIFIER, 2>
,                             <COMMA, ->
quotient                      <IDENTIFIER, 3>
;                             <SEMICOLON, ->
begin                         <BEGIN_KW, ->
num                           <IDENTIFIER, 1>
:=                            <ASSIGN_OP, ->
61                            <INTEGER_NUMBER, 4>
;                             <SEMICOLON, ->
divisor                       <IDENTIFIER, 2>
:=                            <ASSIGN_OP, ->
2                             <INTEGER_NUMBER, 5>
;                             <SEMICOLON, ->
quotient                      <IDENTIFIER, 3>
:=                            <ASSIGN_OP, ->
0                             <INTEGER_NUMBER, 6>
;                             <SEMICOLON, ->
if                            <IF_KW, ->
num                           <IDENTIFIER, 1>
=                             <EQ_OP, ->
1                             <INTEGER_NUMBER, 7>
then                          <THEN_KW, ->
return                        <RETURN_KW, ->
false                         <FALSE_KW, ->
;                             <SEMICOLON, ->
else                          <ELSE_KW, ->
if                            <IF_KW, ->
num                           <IDENTIFIER, 1>
=                             <EQ_OP, ->
2                             <INTEGER_NUMBER, 5>
then                          <THEN_KW, ->
return                        <RETURN_KW, ->
true                          <TRUE_KW, ->
;                             <SEMICOLON, ->
while                         <WHILE_KW, ->
divisor                       <IDENTIFIER, 2>
<=                            <LE_OP, ->
(                             <LEFT_PA, ->
num                           <IDENTIFIER, 1>
/                             <DIV_OP, ->
2                             <INTEGER_NUMBER, 5>
)                             <RIGHT_PA, ->
do                            <DO_KW, ->
begin                         <BEGIN_KW, ->
quotient                      <IDENTIFIER, 3>
:=                            <ASSIGN_OP, ->
num                           <IDENTIFIER, 1>
/                             <DIV_OP, ->
divisor                       <IDENTIFIER, 2>
;                             <SEMICOLON, ->
if                            <IF_KW, ->
divisor                       <IDENTIFIER, 2>
*                             <MUL_OP, ->
quotient                      <IDENTIFIER, 3>
=                             <EQ_OP, ->
num                           <IDENTIFIER, 1>
then                          <THEN_KW, ->
return                        <RETURN_KW, ->
false                         <FALSE_KW, ->
;                             <SEMICOLON, ->
divisor                       <IDENTIFIER, 2>
:=                            <ASSIGN_OP, ->
divisor                       <IDENTIFIER, 2>
+                             <ADD_OP, ->
1                             <INTEGER_NUMBER, 7>
;                             <SEMICOLON, ->
end                           <END_KW, ->
return                        <RETURN_KW, ->
true                          <TRUE_KW, ->
;                             <SEMICOLON, ->
end                           <END_KW, ->
